import{adminRead,localRead,localWrite,sessionRead,sessionWrite}from"./ext.js";import{enableRulesets,getRulesetDetails}from"./ruleset-manager.js";import{getTrustedSites,readFilteringModeDetails}from"./mode-manager.js";import{broadcastMessage}from"./utils.js";import{dnr}from"./ext.js";import{registerInjectables}from"./scripting-manager.js";import{rulesetConfig}from"./config.js";import{ubolLog}from"./debug.js";const adminSettings={keys:new Set,timer:void 0,change(e){this.keys.add(e),void 0===this.timer&&(this.timer=self.setTimeout((()=>{this.timer=void 0,this.process()}),127))},async process(){if(this.keys.has("rulesets")){ubolLog('admin setting "rulesets" changed'),await enableRulesets(rulesetConfig.enabledRulesets),await registerInjectables();const e=await Promise.all([getAdminRulesets(),dnr.getEnabledRulesets()]),[s,t]=e;broadcastMessage({adminRulesets:s,enabledRulesets:t})}if(this.keys.has("noFiltering")){ubolLog('admin setting "noFiltering" changed'),await readFilteringModeDetails(!0);const e=await getTrustedSites();broadcastMessage({trustedSites:Array.from(e)})}this.keys.clear()}};export async function getAdminRulesets(){const e=await adminReadEx("rulesets"),s=new Set(Array.isArray(e)&&e||[]);if(s.has("-*")){s.delete("-*");const e=await getRulesetDetails();for(const t of e.values())t.enabled||s.has(`+${t.id}`)||s.add(`-${t.id}`)}return Array.from(s)}export async function adminReadEx(e){let s;const t=await sessionRead(`admin_${e}`);if(t)s=t.data;else{const t=await localRead(`admin_${e}`);t&&(s=t.data)}return adminRead(e).then((async t=>{const a=`admin_${e}`;await Promise.all([sessionWrite(a,{data:t}),localWrite(a,{data:t})]),JSON.stringify(t)!==JSON.stringify(s)&&adminSettings.change(e)})),s}