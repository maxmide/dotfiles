import{TAB_ID_NONE,browser,dnr,i18n,localRead,localRemove,localWrite,runtime,sessionRead,sessionRemove,sessionWrite}from"./ext.js";import{rulesetConfig,saveRulesetConfig}from"./config.js";import{fetchJSON}from"./fetch.js";import{getAdminRulesets}from"./admin.js";import{ubolLog}from"./debug.js";const TRUSTED_DIRECTIVE_BASE_RULE_ID=8e6,STRICTBLOCK_PRIORITY=29,isStrictBlockRule=e=>{if(29!==e.priority)return!1;if("redirect"!==e.action.type)return!1;const t=e.action.redirect.regexSubstitution;return void 0!==t&&t.includes("/strictblock.")};function getRulesetDetails(){return void 0!==getRulesetDetails.rulesetDetailsPromise||(getRulesetDetails.rulesetDetailsPromise=fetchJSON("/rulesets/ruleset-details").then((e=>new Map(e.map((e=>[e.id,e])))))),getRulesetDetails.rulesetDetailsPromise}async function pruneInvalidRegexRules(e,t){const s=[],o=e=>dnr.isRegexSupported({regex:e,isCaseSensitive:!1}).then((t=>{const o=t?.isSupported||!1;return pruneInvalidRegexRules.validated.set(e,o),!!o||(s.push(`\t${e}  ${t?.reason}`),!1)})),n=[];for(const e of t){if(void 0===e.condition?.regexFilter){n.push(!0);continue}const{regexFilter:t}=e.condition;pruneInvalidRegexRules.validated.has(t)?n.push(pruneInvalidRegexRules.validated.get(t)):n.push(o(t))}const i=await Promise.all(n);return 0!==s.length&&ubolLog(`${e} realm: rejected regexes:\n`,s.join("\n")),t.filter(((e,t)=>i[t]))}async function updateRegexRules(e,t,s){for(const t of e){const{type:e}=t.action;"block"!==e&&"allow"!==e||void 0!==t.condition.regexFilter&&s.push(t.id)}const o=await getEnabledRulesetsDetails(),n=[];for(const e of o)0!==e.rules.regex&&n.push(fetchJSON(`/rulesets/regex/${e.id}`));const i=await Promise.all(n),l=[];for(const e of i)if(!1!==Array.isArray(e))for(const t of e)l.push(t);if(0===l.length)return;const r=await pruneInvalidRegexRules("regexes",l);0!==r.length&&(ubolLog(`Add ${r.length} DNR regex rules`),t.push(...r))}async function updateRemoveparamRules(e,t,s){for(const t of e)"redirect"===t.action.type&&void 0!==t.action.redirect.transform&&s.push(t.id);const[o,n]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails()]),i=[];for(const e of n)0!==e.rules.removeparam&&i.push(fetchJSON(`/rulesets/removeparam/${e.id}`));const l=await Promise.all(i),r=[];if(o)for(const e of l)if(!1!==Array.isArray(e))for(const t of e)r.push(t);if(0===r.length)return;const a=await pruneInvalidRegexRules("removeparam",r);0!==a.length&&(ubolLog(`Add ${a.length} DNR removeparam rules`),t.push(...a))}async function updateRedirectRules(e,t,s){for(const t of e)"redirect"===t.action.type&&void 0!==t.action.redirect.extensionPath&&s.push(t.id);const[o,n]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails()]),i=[];for(const e of n)0!==e.rules.redirect&&i.push(fetchJSON(`/rulesets/redirect/${e.id}`));const l=await Promise.all(i),r=[];if(o)for(const e of l)if(!1!==Array.isArray(e))for(const t of e)r.push(t);if(0===r.length)return;const a=await pruneInvalidRegexRules("redirect",r);0!==a.length&&(ubolLog(`Add ${a.length} DNR redirect rules`),t.push(...a))}async function updateModifyHeadersRules(e,t,s){for(const t of e)"modifyHeaders"===t.action.type&&s.push(t.id);const[o,n]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails()]),i=[];for(const e of n)0!==e.rules.modifyHeaders&&i.push(fetchJSON(`/rulesets/modify-headers/${e.id}`));const l=await Promise.all(i),r=[];if(o)for(const e of l)if(!1!==Array.isArray(e))for(const t of e)r.push(t);if(0===r.length)return;const a=await pruneInvalidRegexRules("modify-headers",r);0!==a.length&&(ubolLog(`Add ${a.length} DNR modify-headers rules`),t.push(...a))}async function updateDynamicRules(){const e=await dnr.getDynamicRules(),t=[],s=[];for(const t of e)!1!==isStrictBlockRule(t)&&s.push(t.id);if(await Promise.all([updateRegexRules(e,t,s),updateRemoveparamRules(e,t,s),updateRedirectRules(e,t,s),updateModifyHeadersRules(e,t,s)]),0===t.length&&0===s.length)return;const o=dnr.MAX_NUMBER_OF_REGEX_RULES;let n=0,i=1;for(const e of t)e?.condition.regexFilter&&(n+=1),(e.id||0)>=8e6||(e.id=i++);return 0!==n&&ubolLog(`Using ${n}/${o} dynamic regex-based DNR rules`),Promise.all([dnr.updateDynamicRules({addRules:t,removeRuleIds:s}).then((()=>{0!==s.length&&ubolLog(`Remove ${s.length} dynamic DNR rules`),0!==t.length&&ubolLog(`Add ${t.length} dynamic DNR rules`)})).catch((e=>{console.error(`updateDynamicRules() / ${e}`)})),updateSessionRules()])}async function updateStrictBlockRules(e,t,s){for(const t of e)!1!==isStrictBlockRule(t)&&s.push(t.id);if(!1===rulesetConfig.strictBlockMode)return;const[o,n,i=[],l=[]]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails(),localRead("excludedStrictBlockHostnames"),sessionRead("excludedStrictBlockHostnames")]);if(!1===o)return localRemove("excludedStrictBlockHostnames"),void sessionRemove("excludedStrictBlockHostnames");const r=[];for(const e of n)0!==e.rules.strictblock&&r.push(fetchJSON(`/rulesets/strictblock/${e.id}`));const a=await Promise.all(r),u=`${runtime.getURL("/strictblock.html")}#\\0`,c=[];for(const e of a)if(!1!==Array.isArray(e))for(const t of e)t.action.redirect.regexSubstitution=u,c.push(t);const d=await pruneInvalidRegexRules("strictblock",c);if(0===d.length)return;ubolLog(`Add ${d.length} DNR strictblock rules`);for(const e of d)t.push(e);const f=i.concat(l);0!==f.length&&(t.push({action:{type:"allow"},condition:{requestDomains:f,resourceTypes:["main_frame"]},priority:29}),ubolLog(`Add 1 DNR session rule with ${f.length} for excluded strict-block domains`))}async function excludeFromStrictBlock(e,t){if("string"!=typeof e||""===e)return;const s=t?localRead:sessionRead,o=new Set(await s("excludedStrictBlockHostnames"));o.add(e);const n=t?localWrite:sessionWrite;return await n("excludedStrictBlockHostnames",Array.from(o)),updateSessionRules()}async function setStrictBlockMode(e){const t=Boolean(e);if(t===rulesetConfig.strictBlockMode)return;rulesetConfig.strictBlockMode=t;const s=[saveRulesetConfig()];return!1===t&&s.push(localRemove("excludedStrictBlockHostnames"),sessionRemove("excludedStrictBlockHostnames")),await Promise.all(s),updateSessionRules()}async function updateSessionRules(){const e=[],t=[],s=await dnr.getSessionRules();if(await updateStrictBlockRules(s,e,t),0===e.length&&0===t.length)return;const o=dnr.MAX_NUMBER_OF_REGEX_RULES;let n=0,i=1;for(const t of e)t?.condition.regexFilter&&(n+=1),t.id=i++;return 0!==n&&ubolLog(`Using ${n}/${o} session regex-based DNR rules`),dnr.updateSessionRules({addRules:e,removeRuleIds:t}).then((()=>{0!==t.length&&ubolLog(`Remove ${t.length} session DNR rules`),0!==e.length&&ubolLog(`Add ${e.length} session DNR rules`)})).catch((e=>{console.error(`updateSessionRules() / ${e}`)}))}async function filteringModesToDNR(e){const[t,s]=await Promise.all([dnr.getDynamicRules({ruleIds:[8e6]}),dnr.getSessionRules({ruleIds:[8000001]})]),o=t?.length&&t[0]||void 0,n=new Set(o?.condition.requestDomains),i=new Set(o?.condition.excludedRequestDomains);void 0!==o&&0===n.size?n.add("all-urls"):i.add("all-urls");const l=new Set([...e.none]),r=new Set([...e.basic,...e.optimal,...e.complete]);let a=new Set,u=new Set;l.has("all-urls")?(a=new Set(["all-urls"]),u=r):(a=l,u=new Set);const c=[],d=[];o&&(c.push(8e6),d.push(8000001));const f=[],R=[];if(a.delete("all-urls")||0!==a.size||0!==u.size){const e={id:8e6,action:{type:"allowAllRequests"},condition:{resourceTypes:["main_frame"]},priority:100};0!==a.size?e.condition.requestDomains=Array.from(a).sort():0!==u.size&&(e.condition.excludedRequestDomains=Array.from(u).sort()),f.push(e);const t={id:8000001,action:{type:"allow"},condition:{tabIds:[TAB_ID_NONE]},priority:100};e.condition.requestDomains?t.condition.initiatorDomains=e.condition.requestDomains.slice():e.condition.excludedRequestDomains&&(t.condition.excludedInitiatorDomains=e.condition.excludedRequestDomains.slice()),R.push(t)}const g=l.has("all-urls")?-r.size:l.size,m=[];if(isDifferentAllowRules(f,t)&&(m.push(dnr.updateDynamicRules({addRules:f,removeRuleIds:c})),ubolLog(`Add "allowAllRequests" dynamic rule for ${g} sites`)),isDifferentAllowRules(R,s)&&(m.push(dnr.updateSessionRules({addRules:R,removeRuleIds:d})),ubolLog(`Add "allow" session rule for ${g} sites`)),0!==m.length)return Promise.all(m)}pruneInvalidRegexRules.validated=new Map;const isDifferentAllowRules=(e,t)=>{const s=["requestDomains","excludedRequestDomains","initiatorDomains","excludedInitiatorDomains"];for(const o of s){const s=e?.length&&e[0].condition[o]||[],n=t?.length&&t[0].condition[o]||[];if(s.join()!==n.join())return!0}return!1};async function defaultRulesetsFromLanguage(){const e=e=>{const t=e.indexOf("-");return-1===t?e:e.slice(0,t)},t=new Set;for(const s of navigator.languages.map(e))t.add(s);t.add(e(i18n.getUILanguage()));const s=new RegExp(`\\b(${Array.from(t).join("|")})\\b`),o=runtime.getManifest().declarative_net_request.rule_resources,n=await getRulesetDetails(),i=[];for(const e of o){const{id:t,enabled:o}=e;if(o){i.push(t);continue}const l=n.get(t);"string"==typeof l.lang&&(!1!==s.test(l.lang)&&i.push(t))}return i}async function patchDefaultRulesets(){const[e=[],t]=await Promise.all([localRead("defaultRulesetIds"),defaultRulesetsFromLanguage()]),s=runtime.getManifest(),o=new Set(s.declarative_net_request.rule_resources.map((e=>e.id))),n=[],i=[];for(const s of t)e.includes(s)||n.push(s);for(const s of e)t.includes(s)||i.push(s);for(const e of rulesetConfig.enabledRulesets)o.has(e)||i.push(e);if(localWrite("defaultRulesetIds",t),0===n.length&&0===i.length)return;const l=new Set(rulesetConfig.enabledRulesets);n.forEach((e=>l.add(e))),i.forEach((e=>l.delete(e)));const r=Array.from(l);ubolLog(`Patched rulesets: ${rulesetConfig.enabledRulesets} => ${r}`),rulesetConfig.enabledRulesets=r}async function enableRulesets(e){const t=new Set(e),[s,o,n]=await Promise.all([dnr.getEnabledRulesets().then((e=>new Set(e))),getAdminRulesets(),getRulesetDetails()]);for(const e of o){const s=e.charAt(0),o=e.slice(1);"+"===s?t.add(o):"-"===s&&t.delete(o)}const i=new Set,l=new Set;for(const e of t)s.has(e)||i.add(e);for(const e of s)t.has(e)||l.add(e);for(const e of i)n.has(e)||i.delete(e);for(const e of l)n.has(e)||l.delete(e);if(0===i.size&&0===l.size)return!1;const r=Array.from(i),a=Array.from(l);return 0!==r.length&&ubolLog(`Enable rulesets: ${r}`),0!==a.length&&ubolLog(`Disable ruleset: ${a}`),await dnr.updateEnabledRulesets({enableRulesetIds:r,disableRulesetIds:a}),await updateDynamicRules(),!0}async function getEnabledRulesetsDetails(){const[e,t]=await Promise.all([dnr.getEnabledRulesets(),getRulesetDetails()]),s=[];for(const o of e){const e=t.get(o);void 0!==e&&s.push(e)}return s}export{defaultRulesetsFromLanguage,enableRulesets,excludeFromStrictBlock,filteringModesToDNR,getRulesetDetails,getEnabledRulesetsDetails,patchDefaultRulesets,setStrictBlockMode,updateDynamicRules,updateSessionRules};