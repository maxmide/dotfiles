import{dnr}from"./ext.js";export const isSideloaded=dnr.onRuleMatchedDebug instanceof Object;export const ubolLog=(...e)=>{!0===isSideloaded&&console.info("[uBOL]",...e)};const rulesets=new Map,bufferSize=isSideloaded?256:1,matchedRules=new Array(bufferSize);matchedRules.fill(null);let writePtr=0;const pruneLongLists=e=>e.length<=21?e:[...e.slice(0,10),"...",...e.slice(-10)],getRuleset=async e=>{if(rulesets.has(e))return rulesets.get(e);let t;if(e===dnr.DYNAMIC_RULESET_ID)t=await dnr.getDynamicRules().catch((()=>{}));else{const s=await fetch(`/rulesets/main/${e}.json`).catch((()=>{}));if(void 0===s)return;t=await s.json().catch((()=>{}))}if(!1===Array.isArray(t))return;const s=new Map;for(const r of t){const t=r.condition;t&&(t.requestDomains&&(t.requestDomains=pruneLongLists(t.requestDomains)),t.initiatorDomains&&(t.initiatorDomains=pruneLongLists(t.initiatorDomains)));const i=r.id;r.id=`${e}/${i}`,s.set(i,r)}return rulesets.set(e,s),s},getRuleDetails=async e=>{const{rulesetId:t,ruleId:s}=e.rule,r=await getRuleset(t);if(void 0!==r)return{request:e.request,rule:r.get(s)}};export const getMatchedRules=!0!==isSideloaded?()=>Promise.resolve([]):async e=>{const t=[];for(let s=0;s<bufferSize;s++){const r=matchedRules[(writePtr+s)%bufferSize];if(null===r)continue;if(-1!==r.request.tabId&&r.request.tabId!==e)continue;const i=getRuleDetails(r);void 0!==i&&t.unshift(i)}return Promise.all(t)};const matchedRuleListener=e=>{matchedRules[writePtr]=e,writePtr=(writePtr+1)%bufferSize};export const toggleDeveloperMode=e=>{!0===isSideloaded&&(e?dnr.onRuleMatchedDebug.addListener(matchedRuleListener):dnr.onRuleMatchedDebug.removeListener(matchedRuleListener))};