const normalizeTarget=t=>"string"==typeof t?Array.from(qsa$(t)):t instanceof Element?[t]:null===t?[]:Array.isArray(t)?t:Array.from(t),makeEventHandler=(t,e)=>function(o){const r=o.currentTarget;if(r instanceof HTMLElement==!1||"function"!=typeof r.querySelectorAll)return;const n=o.target,a=n.closest(t);a===n&&a!==r&&r.contains(a)&&e.call(n,o)};class dom{static attr(t,e,o){for(const r of normalizeTarget(t)){if(void 0===o)return r.getAttribute(e);null===o?r.removeAttribute(e):r.setAttribute(e,o)}}static clear(t){for(const e of normalizeTarget(t))for(;null!==e.firstChild;)e.removeChild(e.firstChild)}static clone(t){const e=normalizeTarget(t);return 0===e.length?null:e[0].cloneNode(!0)}static create(t){if("string"==typeof t)return document.createElement(t)}static prop(t,e,o){for(const r of normalizeTarget(t)){if(void 0===o)return r[e];r[e]=o}}static text(t,e){const o=normalizeTarget(t);if(void 0===e)return 0!==o.length?o[0].textContent:void 0;for(const t of o)t.textContent=e}static remove(t){for(const e of normalizeTarget(t))e.remove()}static empty(t){for(const e of normalizeTarget(t))for(;null!==e.firstElementChild;)e.firstElementChild.remove()}static on(t,e,o,r,n){"function"==typeof o?(n=r,r=o,o=void 0,"boolean"==typeof n&&(n={capture:!0})):(r=makeEventHandler(o,r),void 0===n||"boolean"==typeof n?n={capture:!0}:n.capture=!0);const a=t instanceof Window||t instanceof Document?[t]:normalizeTarget(t);for(const t of a)t.addEventListener(e,r,n)}static off(t,e,o,r){if("function"!=typeof o)return;"boolean"==typeof r&&(r={capture:!0});const n=t instanceof Window||t instanceof Document?[t]:normalizeTarget(t);for(const t of n)t.removeEventListener(e,o,r)}}function qs$(t,e){return"string"==typeof t?document.querySelector(t):null===t?null:t.querySelector(e)}function qsa$(t,e){return"string"==typeof t?document.querySelectorAll(t):null===t?[]:t.querySelectorAll(e)}dom.cl=class{static add(t,e){for(const o of normalizeTarget(t))o.classList.add(e)}static remove(t,...e){for(const o of normalizeTarget(t))o.classList.remove(...e)}static toggle(t,e,o){let r;for(const n of normalizeTarget(t))r=n.classList.toggle(e,o);return r}static has(t,e){for(const o of normalizeTarget(t))if(o.classList.contains(e))return!0;return!1}},dom.root=qs$(":root"),dom.html=document.documentElement,dom.head=document.head,dom.body=document.body;export{dom,qs$,qsa$};