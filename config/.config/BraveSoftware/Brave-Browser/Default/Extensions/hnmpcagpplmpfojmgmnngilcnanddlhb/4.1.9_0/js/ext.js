export const browser=self.browser instanceof Object&&self.browser instanceof Element==!1?self.browser:self.chrome;export const dnr=browser.declarativeNetRequest;export const i18n=browser.i18n;export const runtime=browser.runtime;export const TAB_ID_NONE=browser.tabs.TAB_ID_NONE;export const windows=browser.windows;export function sendMessage(e){return new Promise(((o,s)=>{let r=5;const t=()=>{runtime.sendMessage(e).then((e=>{o(e)})).catch((e=>{r-=1,r<=0?s(e):setTimeout(t,200)}))};t()}))}export async function localRead(e){if(browser.storage instanceof Object!=!1&&browser.storage.local instanceof Object!=!1)try{const o=await browser.storage.local.get(e);if(o instanceof Object==!1)return;return o[e]??void 0}catch(e){}}export async function localWrite(e,o){if(browser.storage instanceof Object!=!1&&browser.storage.local instanceof Object!=!1)return browser.storage.local.set({[e]:o})}export async function localRemove(e){if(browser.storage instanceof Object!=!1&&browser.storage.local instanceof Object!=!1)return browser.storage.local.remove(e)}export async function sessionRead(e){if(browser.storage instanceof Object!=!1&&browser.storage.session instanceof Object!=!1)try{const o=await browser.storage.session.get(e);if(o instanceof Object==!1)return;return o[e]??void 0}catch(e){}}export async function sessionWrite(e,o){if(browser.storage instanceof Object!=!1&&browser.storage.session instanceof Object!=!1)return browser.storage.session.set({[e]:o})}export async function sessionRemove(e){if(browser.storage instanceof Object!=!1&&browser.storage.session instanceof Object!=!1)return browser.storage.session.remove(e)}export async function adminRead(e){if(browser.storage instanceof Object!=!1&&browser.storage.managed instanceof Object!=!1)try{const o=await browser.storage.managed.get(e);if(o instanceof Object==!1)return;return o[e]??void 0}catch(e){}}